#N canvas 588 81 967 645 12;
#X obj 487 579 spigot;
#X msg 484 284 bang;
#X obj 455 494 bonk~;
#X msg 507 352 print;
#X obj 393 398 adc~;
#X obj 404 579 spigot;
#N canvas 1028 240 305 506 synth 0;
#X obj 72 57 r bonk-cooked;
#X obj 72 109 unpack;
#X obj 72 159 * 12;
#X obj 72 184 div 7;
#X obj 72 134 + 1;
#X obj 72 234 mtof;
#X obj 59 299 osc~;
#X obj 59 324 cos~;
#X obj 72 209 + 47;
#X obj 156 357 line~;
#X obj 156 382 *~;
#X obj 156 407 lop~ 500;
#X obj 59 349 *~;
#X obj 59 441 dac~;
#X obj 174 279 dbtorms;
#X obj 174 229 * 0.5;
#X obj 174 254 + 50;
#X obj 156 305 f;
#X obj 174 27 inlet;
#X obj 59 382 hip~ 5;
#X msg 81 82 0 60;
#X obj 59 274 sig~;
#X msg 156 332 \$1 \, 0 200;
#X obj 141 281 b;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 8 0;
#X connect 4 0 2 0;
#X connect 5 0 21 0;
#X connect 5 0 23 0;
#X connect 6 0 7 0;
#X connect 7 0 12 0;
#X connect 8 0 5 0;
#X connect 9 0 10 0;
#X connect 9 0 10 1;
#X connect 10 0 11 0;
#X connect 11 0 12 1;
#X connect 12 0 19 0;
#X connect 14 0 17 1;
#X connect 15 0 16 0;
#X connect 16 0 14 0;
#X connect 17 0 22 0;
#X connect 18 0 15 0;
#X connect 19 0 13 1;
#X connect 19 0 13 0;
#X connect 20 0 1 0;
#X connect 21 0 6 0;
#X connect 22 0 9 0;
#X connect 23 0 17 0;
#X restore 640 524 pd synth;
#X floatatom 640 498 0 0 0 0 - - - 0;
#X msg 606 466 0;
#X msg 640 466 90;
#X text 24 352 In this patch \, after starting DSP \, you can print
out the raw or cooked output using the two "spigots" or listen to a
synthesizer output by raising its volume., f 47;
#X text 675 469 output volume;
#X text 689 487 (0-100);
#X msg 421 127 mask 4 0.7;
#X text 507 113 Describes how energy in each frequency band masks later
energy in the band. Here the masking is total for 4 analysis periods
and then drops by 0.7 each period.;
#X text 526 277 Poll the current spectrum via "raw" outlet \, You can
set a very high threshold if you don't want attacks mixed in.;
#X msg 496 321 debug 0;
#X obj 443 556 tgl 15 0 empty empty empty 0 -6 0 8 #fcfcfc #000000
#000000 0 1;
#X obj 526 556 tgl 15 0 empty empty empty 0 -6 0 8 #fcfcfc #000000
#000000 0 1;
#X obj 487 609 print cooked;
#X obj 404 609 print raw;
#X text 276 579 enable printout:;
#X text 519 202 Minimum "velocity" to output (quieter notes are ignored.)
;
#X obj 503 525 s bonk-cooked;
#X text 24 192 Bonk's two outputs are the raw spectrum of the attack
(provided as a list of 11 numbers giving the signal "loudness" in the
11 frequency bands used) \, and the "cooked" output which gives only
an instrument number (counting up from zero) and a "velocity". This
"velocity" is the sum of the square roots of the amplitudes of the
bands \, normalized so that 100 is an attack of amplitude of about
1 The instrument number is significant only if Bonk has a "template
set" in memory., f 47;
#X text 501 33 Set low and high thresholds. Signal growth must exceed
the high one and then fall to the low one to make an attack. The unit
is the sum of the proportional growth in the 11 filter bands. Proportional
growth is essentially the logarithmic time derivative.;
#X msg 516 380 print 1;
#X text 24 53 The Bonk object takes an audio signal input and looks
for "attacks" defined as sharp changes in the spectral envelope of
the incoming sound. Optionally \, and less reliably \, you can have
Bonk check the attack against a collection of stored templates to try
to guess which of two or more instruments was hit. Bonk is described
theoretically in the 1998 ICMC proceedings \, reprinted on msp.ucsd.edu.
, f 47;
#N canvas 544 116 707 637 creation-arguments 0;
#X text 228 14 creation arguments for bonk~;
#X text 70 272 -npts 256;
#X text 44 244 default value:;
#X text 70 308 -hop 128;
#X text 70 342 -nfilters 11;
#X text 68 380 -halftones 6;
#X text 76 514 -overlap 1;
#X text 79 567 -firstbin 1;
#X text 71 454 -minbandwidth 1.5;
#X text 122 147 All frequency parameters are specified in 'bins'. One
bin is the sample rate divided by the window size. The minimum possible
bandwidth is 1.5 bins. Higher bandwidths give numerically more robust
outputs.;
#X text 43 229 Arguments and;
#X text 212 270 window size in points;
#X text 210 306 analysis period ("hop size") in points;
#X text 212 340 number of filters to use;
#X text 212 379 desired bandwidth of filters in halftones \, effective
in the exponentially spaced region. (At lower center frequencies the
bandwidth is supported by the "minbandwidth" parameter below).;
#X text 212 511 overlap factor between filters. If 1 \, the filters
are spaced to line up at their half-power points. Other values specify
more or fewer filters proportionally.;
#X text 121 49 bonk~ uses a filterbank whose center frequencies are
spaced equally at low frequencies and proportionally at high ones -
i.e. \, they increase linearly \, then exponentially. They are determined
by the filters' bandwidths and overlap. The bandwidths are specified
proportionally to frequency but bounded below by a specified minimum.
;
#X text 210 455 minimum bandwidth in bins. If the bandwidth specified
by "halftones" is smaller than this \, this value is used. This must
be at least 1.5.;
#X text 212 567 center frequency \, in bins \, of the lowest filter.
The others are computed from this.;
#X restore 198 506 pd creation-arguments;
#N canvas 654 163 692 327 templates 0;
#X msg 79 97 learn 0;
#X msg 90 137 forget;
#X msg 101 174 write templates.txt;
#X msg 117 204 read templates.txt;
#X msg 52 38 debounce 0;
#X msg 66 66 learn 10;
#X obj 69 273 outlet;
#X text 171 65 Forget all templates and start learning new ones. The
argument gives the number of times you will hit each instrument (10
recommended.) Turn on the output volume above for audible feedback
as you train Bonk. "Learn 0" exits learn mode., f 69;
#X text 144 131 Forget the last template. In Learn mode \, use "forget"
to erase and record over a template.;
#X text 245 174 Write templates to a file in text-editable format.
;
#X text 253 204 Read templates from a file.;
#X text 134 39 Minimum time (msec) between attacks in learn mode;
#X text 130 65 <====;
#X connect 0 0 6 0;
#X connect 1 0 6 0;
#X connect 2 0 6 0;
#X connect 3 0 6 0;
#X connect 4 0 6 0;
#X connect 5 0 6 0;
#X restore 524 412 pd templates;
#X msg 399 56 thresh 2.5 5;
#X msg 437 176 attack-frames 1;
#X msg 449 201 minvel 7;
#X msg 456 228 spew 0;
#X msg 467 254 useloudness 0;
#X text 664 588 Updated for Pd version 0.42;
#X text 24 416 By default bonk's analysis is carried out on a 256-point
window (6 msec at 44.1 kHz) and the analysis period is 128 samples.
These and other parameters may be overridden using creation arguments
as shown in the subpatch below:, f 47;
#X obj 55 14 bonk~;
#X text 107 13 - attack detection and spectral envelope measurement
;
#X text 508 229 Turn spew mode on/off.;
#X text 557 176 Number of frames over which to measure growth.;
#X text 571 253 experimental: use alternative loudness units.;
#X text 557 321 Turn debugging on or off.;
#X text 553 351 Print out settings and templates.;
#X text 577 380 Print out filterbank settings.;
#X text 619 413 More messages for managing templates.;
#X msg 63 572 \; pd dsp \$1;
#X obj 63 548 tgl 17 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X text 90 547 DSP on/off;
#X connect 0 0 19 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 2 1 0 0;
#X connect 2 1 23 0;
#X connect 3 0 2 0;
#X connect 4 0 2 0;
#X connect 5 0 20 0;
#X connect 7 0 6 0;
#X connect 8 0 7 0;
#X connect 9 0 7 0;
#X connect 13 0 2 0;
#X connect 16 0 2 0;
#X connect 17 0 5 1;
#X connect 18 0 0 1;
#X connect 26 0 2 0;
#X connect 29 0 2 0;
#X connect 30 0 2 0;
#X connect 31 0 2 0;
#X connect 32 0 2 0;
#X connect 33 0 2 0;
#X connect 34 0 2 0;
#X connect 47 0 46 0;
